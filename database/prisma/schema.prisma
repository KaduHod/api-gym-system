generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             Int        @id @default(autoincrement())
  alunoId        Int?       @unique
  professorId    Int?       @unique
  type           String?
  email          String     @unique
  senha          String
  dataNascimento DateTime?
  cpf            String?
  nome           String?
  telefone       String?
  image          String?
  aluno          Aluno?     @relation(fields: [alunoId], references: [id])
  professor      Professor? @relation(fields: [professorId], references: [id])
}

model Aluno {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  periodizacoes Periodizacao[]
  professores   Professor[]
}

model Professor {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creef         String?
  exercicios    Exercicio[]
  profile       Profile?
  periodizacoes Periodizacao[]
  treinos       Treino[]
  alunos        Aluno[]
  
}

//referente a treinos A, B, C, D, E e etc
model Periodizacao {
  id          Int        @id @default(autoincrement())
  dataInicio  DateTime?   @default(now())
  dataFim     DateTime?   @updatedAt
  nome        String?    @db.VarChar(255)
  treinos     Treino[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  aluno       Aluno?     @relation(fields: [alunoId], references: [id])
  professor   Professor? @relation(fields: [professorId], references: [id])
  alunoId     Int?
  professorId Int?

}

//Referente a o trieno de um dia
model Treino {
  id             Int           @id @default(autoincrement())
  nome           String        @db.VarChar(255)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  descricao      String?
  aquecimento    String?
  exercicios     ExercicioDoTreino[]
  periodizacao   Periodizacao? @relation(fields: [periodizacaoId], references: [id])
  professor      Professor?    @relation(fields: [professorId], references: [id])
  professorId    Int?
  periodizacaoId Int?
}

model Exercicio {
  id          Int            @id @default(autoincrement())
  nome        String         @db.VarChar(255)
  descricao   String?
  musculo     String?
  video       String?        @db.VarChar(255)
  tipoId      Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  imagem      String?
  professor   Professor?     @relation(fields: [professorId], references: [id])
  tipo        TipoExercicio? @relation(fields: [tipoId], references: [id])
  professorId Int?
  exerciciosDoTreino ExercicioDoTreino[]
}

model ExercicioDoTreino {
  id          Int @id @default(autoincrement())
  exercicio   Exercicio @relation(fields: [exercicioId], references: [id])
  exercicioId Int 
  treino      Treino? @relation(fields: [treinoId], references: [id])
  treinoId    Int?
  series      Int?
  repeticoes  Int?
  tipoRepeticoes String?
  tipoSeries  String?
  
}


model TipoExercicio {
  id         Int              @id @default(autoincrement())
  descricao  String           @db.VarChar(255)
  nome       String           @db.Char(11)
  exercicios Exercicio[]
}

model Execucao {
  id        Int    @id @default(autoincrement())
  descricao String @db.VarChar(255)
}
